# 100-matrix_mul.txt

This module defines a matrix multipying function ``def matrix_mul(m_a, m_b)``

Usage
=====

``def matrix_mul(..)`` returns the mutiplication of two matrices provided that
they are valid matrices.

**
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
	>>> print(matrix_mul(
	...		[[1, 2], [3, 4]],
	...		[[1, 2], [3, 4]]
	... ))
	[[7, 10], [15, 22]]

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[[3, 4], [5, 6]]
	... ))
	[[13, 16]]

Matrices can contain only float and integer values

**

	>>> print(matrix_mul(
	...		[[1.45, 21]],
	...		[[3.33, 11, 2], [5, 8, 7.23]]
	... ))
	[[109.83, 183.95, 154.73]]

At least two arguments must be provided.

**

	>>> m_a = [
	... 	[1.45, 21, -6.2],
	... 	[8, 7.23, 9.2]
    	... ]
    	>>> m_b = [
    	... 	[8, 7.23],
    	... 	[-3.4, -2.4],
    	... 	[7.0, 4.3]
	... ]

	>>> print(matrix_mul(m_a))
    	Traceback (most recent call last):
    	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

**

	>>> print(matrix_mul())
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Both arguments must be of list type

**

	>>> print(matrix_mul(
	...		(1, 2),
	...		[3, 4]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list

**

	>>> print(matrix_mul(
	...		[1, 2],
	...		{3, 4}
	... ))
	Traceback (most recent call last):
	TypeError: m_b must be a list

If invalid arguments are passed as both arguments, a TypeError message is printed
only for the first argument.

**

	>>> print(matrix_mul(4, "not a list"))
	Traceback (most recent call last):
        TypeError: m_a must be a list

Both arguments must be list of lists

**

	>>> print(matrix_mul(
	...		[1, 2, 3],
	...		[[]]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

**

	>>> print(matrix_mul(
	...		[[]],
	...		[3, 4, 5]
	... ))
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

**

	>>> print(matrix_mul(
	...		[(1, 2, 3)],
	...		[3, 4, 5]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[{3, 4}]
	... ))
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

If both arguments are not list of lists, a TypeError message is printed only
for the first argument.

**

	>>> print(matrix_mul(
	...		[1, 2],
	...		[3, 4]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

**

	>>> print(matrix_mul(
	...		[{'a': 1, 'b': 2}],
	...		[(3, 4), {5, 6}]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

Matrices cannot contain empty lists.

**

	>>> print(matrix_mul(
	...		[[]],
	...		[[3, 4]]
	... ))
	Traceback (most recent call last):
	ValueError: m_a can't be empty

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4]],
	...		[[5, 6], []]
	... ))
	Traceback (most recent call last):
	ValueError: m_b can't be empty

If both arguments contain empty lists, a ValueError message is printed only
for the first argument.

**

	>>> print(matrix_mul(
	...		[[1, 2], []],
	...		[[5, 6], []]
	... ))
	Traceback (most recent call last):
	ValueError: m_a can't be empty

The program will detect a non-list->not a list of lists->empty list and
empty list of lists, in this order

**

	>>> print(matrix_mul(
	...		[(1, 2)],
	...		[[5, 6], []]
	... ))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

**

	>>> print(matrix_mul(
	...		[[]],
	...		(3, 4)
	... ))
	Traceback (most recent call last):
	TypeError: m_b must be a list

**

	>>> print(matrix_mul(
	...		[['a', 2]],
	...		[[3, 4]]
	... ))
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[[3, 'd']]
	... ))
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

If both matrix arguments contain non-float or non-integer values, a
TypeError message is only printed for the first argument.

**

	>>> print(matrix_mul(
	...		[[[1, 3], 4]],
	...		[[2, 'd']]
	... ))
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

If the rows in m_a or m_b are not the same, a TypeError exception with a message
is raised

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4.2, 6]],
	...		[[7, 8.2]]
	... ))
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4.2]],
	...		[[7, 8.2], [2.3]]
	... ))
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

A TypeError exception with message is only raised for m_a even if both matrix
arguments contain lists of different sizes.

**

	>>> print(matrix_mul(
	...		[[3], [5, 4.2]],
	...		[[7, 8.2], [2.3]]
	... ))
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

If the size of the first element in m_a is not equal to the size of m_b, a
ValueError exception with message is raised

**
	>>> print(matrix_mul(
	...		[[3, 4], [5, 4]],
	...		[[7, 8]]
	... ))
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied

**

	>>> print(matrix_mul(
	...		[[3.0, 4.7, 5.0], [5.4, 4.1, 6.5]],
	...		[[7, 8], [3, 9]]
	... ))
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied
