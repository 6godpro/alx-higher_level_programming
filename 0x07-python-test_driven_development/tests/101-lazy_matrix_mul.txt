# tests/101-lazy_matrix_mul.txt

This module contains a matrix multplyiing function ``def lazy_matrix_mul(m_a, m_b):``.


Usage
=====

``def lazy_matrix_mul(...):`` return a matrix representing the multiplicatiton
of both arguments provided that they are both valid matrices.

**

	>>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	>>> print(matrix_mul(
	...		[[1, 2], [3, 4]],
	...		[[1, 2], [3, 4]]
	... ))
	[[ 7 10]
     	 [15 22]]

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[[3, 4], [5, 6]]
	... ))
	[[13 16]]

**

	>>> print(matrix_mul(
	...		[[1.45, 21]],
	...		[[3.33, 11, 2], [5, 8, 7.23]]
	... ))
	[[109.8285 183.95   154.73  ]]

**
	>>> print(matrix_mul(
	...		[1, 2],
	...		[3, 4]
	... ))
	11

At least two arguments must be provided.

**

	>>> m_a = [
	... 	[1.45, 21, -6.2],
	... 	[8, 7.23, 9.2]
    	... ]
    	>>> m_b = [
    	... 	[8, 7.23],
    	... 	[-3.4, -2.4],
    	... 	[7.0, 4.3]
	... ]

	>>> print(matrix_mul(m_a))
    	Traceback (most recent call last):
    	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

**

	>>> print(matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

**

	>>> print(matrix_mul(
	...		[(1, 2)],
	...		[[5, 6], []]
	... ))
	[list([5, 6])]

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4]],
	...		[[5, 6], []]
	... ))
	[list([5, 6]) list([5, 6, 5, 6, 5, 6])]

**

	>>> print(matrix_mul(
	...		[(1, 2, 3)],
	...		[3, 4, 5]
	... ))
	[26]

**

	>>> print(matrix_mul(
	...		(1, 2),
	...		[3, 4]
	... ))
	11


Argument cannot be of an unhashable type.

**

	>>> print(matrix_mul(
	...		[1, 2],
	...		{3, 4}
	... ))
	Traceback (most recent call last):
	TypeError: unsupported operand type(s) for *: 'int' and 'set'

**

	>>> print(matrix_mul(4, "not a list"))
	Traceback (most recent call last):
        TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U21') dtype('<U21') dtype('<U21')

Both arguments must be list of lists

**

	>>> print(matrix_mul(
	...		[1, 2, 3],
	...		[[]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (3,) and (1,0) not aligned: 3 (dim 0) != 1 (dim 0)


**

	>>> print(matrix_mul(
	...		[[]],
	...		[3, 4, 5]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (3,) not aligned: 0 (dim 1) != 3 (dim 0)

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[{3, 4}]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,) not aligned: 2 (dim 1) != 1 (dim 0)

**

	>>> print(matrix_mul(
	...		[{'a': 1, 'b': 2}],
	...		[(3, 4), {5, 6}]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,) and (2,) not aligned: 1 (dim 0) != 2 (dim 0)

Matrices cannot contain empty lists.

**

	>>> print(matrix_mul(
	...		[[]],
	...		[[3, 4]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)

If both arguments contain empty lists, a TypeError or ValueError exception with
an appropriate error message is displayed.

**
Multiplying two empty lists.

	>>> print(matrix_mul(
	...		[[1, 2], []],
	...		[[5, 6], []]
	... ))
	Traceback (most recent call last):
	TypeError: can't multiply sequence by non-int of type 'list'

**

	>>> print(matrix_mul(
	...		[[]],
	...		(3, 4)
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,) not aligned: 0 (dim 1) != 2 (dim 0)

**

	>>> print(matrix_mul(
	...		[['a', 2]],
	...		[[3, 4]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

**

	>>> print(matrix_mul(
	...		[[1, 2]],
	...		[[3, 'd']]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

**

	>>> print(matrix_mul(
	...		[[[1, 3], 4]],
	...		[[2, 'd']]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

If the rows in m_a or m_b are not the same, a TypeError or ValueError exception
with the appropriate error message is raised.

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4.2, 6]],
	...		[[7, 8.2]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

**

	>>> print(matrix_mul(
	...		[[1, 2], [3, 4.2]],
	...		[[7, 8.2], [2.3]]
	... ))
	Traceback (most recent call last):
	TypeError: can't multiply sequence by non-int of type 'float'

**

	>>> print(matrix_mul(
	...		[[3], [5, 4.2]],
	...		[[7, 8.2], [2.3]]
	... ))
	Traceback (most recent call last):
	TypeError: can't multiply sequence by non-int of type 'list'

If the size of the first element in m_a is not equal to the size of m_b, a
ValueError exception with an error message is raised

**
	>>> print(matrix_mul(
	...		[[3, 4], [5, 4]],
	...		[[7, 8]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

**

	>>> print(matrix_mul(
	...		[[3.0, 4.7, 5.0], [5.4, 4.1, 6.5]],
	...		[[7, 8], [3, 9]]
	... ))
	Traceback (most recent call last):
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
