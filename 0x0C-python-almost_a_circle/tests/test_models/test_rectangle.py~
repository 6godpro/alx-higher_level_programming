#!/usr/bin/python3
# test_rectangle.py
"""This module contains test cases for the Rectangle class."""

import unittest
from models.base import Base
from models.rectangle import Rectangle

class TestRectangle_Instantiation(unittest.TestCase):
    """Unittest for the instantiation of a rectangle."""

    # testing with less than two args will raise a TypeError exception
    def test_no_arg(self):
        with self.assertRaises(TypeError):
            Rectangle()

    def test_with_one_args(self):
        with self.assertRaises(TypeError):
            Rectangle(12)

    # The minimum required number of argument is two(2).
    def test_two_bases_with_two_args(self):
        r1 = Rectangle(1, 3)
        r2 = Rectangle(2, 4)
        self.assertEqual(r2.id, r1.id + 1)

    def test_two_bases_with_three_args(self):
        r1 = Rectangle(1, 3, 5)
        r2 = Rectangle(2, 4, 6)
        self.assertEqual(r2.id, r1.id + 1)

    def test_three_bases_with_four_args(self):
        r1 = Rectangle(1, 3, 5, 7)
        r2 = Rectangle(2, 4, 6, 8)
        r3 = Rectangle(3, 5, 7, 9)
        self.assertEqual(r3.id, r1.id + 2)

    def test_id_with_five_args(self):
        self.assertEqual(89, Rectangle(2, 4, 1, 3, 89).id)

    # Testing with more than five (5) args will raise a TypeError exception
    def test_with_more_than_five_args(self):
        with self.assertRaises(TypeError):
            Rectangle(1, 2, 3, 4, 5, 6)

    # The class Rectangle inherits from the class Base."""
    def test_rect_inherits_base(self):
        self.assertIsInstance(Rectangle(2, 3), Base)

    # Test that the attributes height, width, x, y are private
    def test_private_width_attr(self):
        with self.assertRaises(AttributeError):
            print(Rectangle(2, 4).__width)

    def test_private_height_attr(self):
        with self.assertRaises(AttributeError):
            print(Rectangle(2, 4).__height)

    def test_private_x_attr(self):
        with self.assertRaises(AttributeError):
            print(Rectangle(10, 4, 5, 6).__x)

    def test_private_y_attr(self):
        with self.assertRaises(AttributeError):
            print(Rectangle(10, 4, 5, 6).__y)


class TestAttributesType(unittest.TestCase):
    # Test that the attributes must be integers
    def test_str_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle("10", 2)

    def test_str_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, "2")

    def test_str_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, "9", 1)

    def test_str_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, "8")

    def test_float_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle(2.2, 2)

    def test_float_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, 11.5)

    def test_float_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, 2.8, 1)

    def test_float_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, 5.3)

    def test_list_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle([1, 2, 3], 2)

    def test_list_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, [1, 2, 3])

    def test_list_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, [1, 2, 3], 1)

    def test_list_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, [1, 2, 3])

    def test_tuple_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle((1, 2, 3), 2)

    def test_tuple_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, (1, 2, 3))

    def test_tuple_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, (1, 2, 3), 1)

    def test_tuple_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, (1, 2, 3))

    def test_set_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle({1, 2, 3}, 2)

    def test_set_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, {1, 2, 3})

    def test_set_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, {1, 2, 3}, 1)

    def test_set_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, {1, 2, 3})

    def test_dict_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle({'a': 1, 'b': 2, 'c': 3}, 2)

    def test_dict_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, {'a': 1, 'b': 2, 'c': 3})

    def test_dict_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, {'a': 1, 'b': 2, 'c': 3}, 1)

    def test_dict_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, {'a': 1, 'b': 2, 'c': 3})

    def test_complex_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle(complex(2), 2)

    def test_complex_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, complex(10))

    def test_complex_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, complex(1), 1)

    def test_complex_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, complex(0))

    def test_frozenset_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle(frozenset({1, 2, 3}), 2)

    def test_frozenset_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, frozenset({1, 2, 3}))

    def test_frozenset_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, frozenset({1, 2, 3}), 1)

    def test_frozenset_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, frozenset({1, 2, 3}))

    def test_nan_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle(float('nan'), 2)

    def test_nan_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, float('nan'))

    def test_nan_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, float('nan'), 1)

    def test_nan_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, float('nan'))

    def test_inf_width_attr(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle(float('inf'), 2)

    def test_inf_height_attr(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, float('inf'))

    def test_inf_x_attr(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 2, float('inf'), 1)

    def test_inf_y_attr(self):
        with self.assertRaisesRegex(TypeError, "y must be an integer"):
            Rectangle(10, 2, 0, float('inf'))


    # Test values of attributes
    def test_neg_width_attr(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(-1, 2)

    def test_zero_width_attr(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(0, 2)

    def test_neg_height_attr(self):
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            Rectangle(1, -2)

    def test_zero_height_attr(self):
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            Rectangle(1, 0)

    # If the value of width and height are not > 0,  a TypeError is raised
    # only for width

    def test_zero_width_and_height_attr(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(0, 0)

    # Test value of x and y attribute
    def test_neg_x_attr(self):
        with self.assertRaisesRegex(ValueError , "x must be >= 0"):
            Rectangle(10, 20, -1, 4)

    def test_zero_x_attr(self):
        self.assertEqual(Rectangle(10, 20, 0, 4).x, 0)

    def test_neg_y_attr(self):
        with self.assertRaisesRegex(ValueError , "y must be >= 0"):
            Rectangle(10, 20, 2 , -1)

    def test_zero_x_attr(self):
        self.assertEqual(Rectangle(10, 20, 2, 0).y, 0)

    # Changing attribute value after instantiation
    def test_set_and_get_width_attr(self):
        r = Rectangle(2, 4, 0, 0)
        r.width = 89
        self.assertEqual(r.width, 89)

    def test_set_and_get_height_attr(self):
        r = Rectangle(1, 3, 1, 2)
        r.height = 98
        self.assertEqual(r.height, 98)

    def test_set_and_get_x_attr(self):
        r = Rectangle(2, 4)
        r.x = 5
        self.assertEqual(r.x, 5)

    def test_set_and_get_y_attr(self):
        r = Rectangle(2, 4, 1, 2)
        r.y = 6
        self.assertEqual(r.y, 6)

class InstantiationOrder(unittest.TestCase):
    """Unittest for testing the order of attribute instantiation."""
    def test_width_before_height(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(-1, "not an integer")

    def test_width_before_x(self):
        with self.assertRaisesRegex(TypeError, "width must be an integer"):
            Rectangle("not an integer", 10, "invalid", 0)

    def test_width_before_y(self):
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            Rectangle(-5, 2, 0, "not an integer")

    def test_height_before_x(self):
        with self.assertRaisesRegex(TypeError, "height must be an integer"):
            Rectangle(10, "invalid", "also an invalid", 2)

    def test_height_before_y(self):
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            Rectangle(10, -3, 2, "invalid")

    def test_x_before_y(self):
        with self.assertRaisesRegex(TypeError, "x must be an integer"):
            Rectangle(10, 20, "invalid", -2)
